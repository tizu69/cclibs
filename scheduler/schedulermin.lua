local a=require"cc.expect"local b,c=a.expect,a.range;local d={["<"]=1,["="]=2,[">"]=0}local e={["="]=0,[">"]=1}local f={t=0,s=1,m=2}local g={daily=0,["12h"]=1,["6h"]=2,["4h"]=3,["3h"]=4,["2h"]=5,hourly=6,["45m"]=7,["30m"]=8,["15m"]=9}local h={}h.any="minecraft:air"function h.new(i)b(1,i,"boolean","table")local j=type(i)=="boolean"and{cyclic=i,entries={}}or i;local k,l=0,0;if j.ctx then k,l=j.ctx.station,j.ctx.condition end;local m=setmetatable({ctx={station=k,condition=l}},{__index=h})j=setmetatable(j,{__index=m})return j end;function h:entry(n,i)b(1,n,"string")b(2,i,"table")self.ctx.station=self.ctx.station+1;self.ctx.condition=1;self.entries[self.ctx.station]={instruction={id=n,data=i},conditions={}}return self end;function h:condition(n,i)b(1,n,"string")b(2,i,"table")local o=self.entries[self.ctx.station].conditions;o[self.ctx.condition]=o[self.ctx.condition]or{}table.insert(o[self.ctx.condition],{id=n,data=i})return self end;function h:OR()self.ctx.condition=self.ctx.condition+1;return self end;function h:serialize(p)self.ctx=nil;return p and textutils.serializeJSON(self)or textutils.serialize(self)end;function h:to(q)b(1,q,"string")return self:entry("create:destination",{text=q})end;function h:deliverPackage()return self:entry("create:package_delivery",{})end;function h:fetchPackage(r)b(1,r,"string")return self:entry("create:package_retrieval",{text=r})end;function h:rename(q)b(1,q,"string")return self:entry("create:rename",{text=q})end;function h:section(s,t,u,v)b(1,s,"string")b(2,t,"string")b(3,u,"boolean")b(4,v,"boolean")return self:entry("createrailwaysnavigator:travel_section",{train_group=s,train_line=t,include_previous_station=u,usable=v})end;function h:throttle(w)b(1,w,"number")c(w,5,100)return self:entry("create:throttle",{value=w})end;function h:through(q)b(1,q,"string")return self:entry("railways:waypoint_destination",{text=q})end;function h:setlink(x,y,z)b(1,x,"string")b(2,y,"string")b(3,z,"number")return self:entry("railways:redstone_link",{frequency={{id=x,count=1},{id=y,count=1}},power=z})end;function h:fixtimings()return self:entry("createrailwaysnavigator:reset_timings",{})end;function h:wait(A,B)b(1,A,"number")b(2,B,"string","nil")B=B or"s"return self:condition("create:delay",{value=A,time_unit=f[B]})end;function h:time(C,D,E)b(1,C,"number")b(2,D,"number")b(3,E,"string")c(C,0,23)c(D,0,59)return self:condition("create:time_of_day",{hour=C,minute=D,rotation=g[E]})end;function h:fluid(F,G,H)b(1,F,"string")b(2,G,"string")b(3,H,"number")return self:condition("create:fluid_threshold",{bucket={id=F,count=1},threshold=tostring(H),operator=d[G],measure=0})end;function h:item(F,G,H)b(1,F,"string")b(2,G,"string")b(3,H,"number")return self:condition("create:item_threshold",{bucket={id=F,count=1},threshold=tostring(H),operator=d[G],measure=0})end;function h:getlink(x,y,I)b(1,x,"string")b(2,y,"string")b(3,I,"boolean")return self:condition("create:redstone_link",{frequency={{id=x,count=1},{id=y,count=1}},inverted=I and 0 or 1})end;function h:passengers(G,J)b(1,G,"string")b(2,J,"number")return self:condition("create:player_count",{count=J,exact=e[G]})end;function h:cargoidle(A,B)b(1,A,"number")b(2,B,"string","nil")B=B or"s"return self:condition("create:idle",{value=A,time_unit=f[B]})end;function h:unloaded()return self:condition("create:unloaded",{})end;function h:powered()return self:condition("create:powered",{})end;function h:loaded()return self:condition("railways:loaded",{})end;function h:waitdynamic(A,K,B)b(1,A,"number")b(2,K,"number")b(3,B,"string","nil")B=B or"s"return self:condition("createrailwaysnavigator:dynamic_delay",{value=A,min=K,time_unit=f[B]})end;function h:energy(G,H)b(1,G,"string")b(2,H,"number")return self:condition("createaddition:energy_threshold",{threshold=H,operator=d[G],measure=0})end;return h
